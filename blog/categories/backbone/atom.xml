<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backbone | Adventures in code land]]></title>
  <link href="http://dominicphillips.de/blog/categories/backbone/atom.xml" rel="self"/>
  <link href="http://dominicphillips.de/"/>
  <updated>2014-02-17T14:01:38+01:00</updated>
  <id>http://dominicphillips.de/</id>
  <author>
    <name><![CDATA[Dominic Phillips]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Proxy all links through router in backbone app]]></title>
    <link href="http://dominicphillips.de/blog/2013/09/19/proxy-all-clicks-through-router-in-backbone-app/"/>
    <updated>2013-09-19T11:41:00+02:00</updated>
    <id>http://dominicphillips.de/blog/2013/09/19/proxy-all-clicks-through-router-in-backbone-app</id>
    <content type="html"><![CDATA[<p>While working on some single page prototypes I was in the situation where I wanted to quickly proxy all internal links through a single backbone router. The easiest solution I found was to wrap the whole application in an AppView, catch all link clicks and pass them to the router. In case there are external links, add a &ldquo;pass&rdquo; class. Some example code:</p>

<p>``` coffeescript
class MyApp.Views.AppView extends Backbone.View
  el : &lsquo;#app&rsquo;</p>

<p>  events:</p>

<pre><code>'click a' : 'proxyLinks'
</code></pre>

<p>  proxyLinks : (e) &ndash;></p>

<pre><code>$t = $(e.currentTarget)

if $t.hasClass('pass')
  return

e.preventDefault()
href = $t.attr('href')
MyApp.router.navigate(href, true)
</code></pre>

<p>```</p>

<p>You&rsquo;ll only want to initialize this view once. If you have more than one router you could add the routers name as a data attribute to the link or distinguish by prefixes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a realtime feed]]></title>
    <link href="http://dominicphillips.de/blog/2013/08/09/realtime-feed-with-go-websockets-and-backbone/"/>
    <updated>2013-08-09T22:03:00+02:00</updated>
    <id>http://dominicphillips.de/blog/2013/08/09/realtime-feed-with-go-websockets-and-backbone</id>
    <content type="html"><![CDATA[<p>This is part one of the real time feed series, <del>check out parts <a href="http://">2</a> and <a href="http://">3</a></del> <i>not yet</i></p>

<p>In this series of blog posts we are going to build a web socket based real time feed, using the amazing revel framework, backbone and HTML5 websockets.</p>

<p>Revel is a &ldquo;high-productivity web framework&rdquo; written in the Go programming language that shows promising results in benchmarks and is also a joy to work with. It sports a huge collection of features such as sessions, hot code reload, job running and a <a href="http://robfig.github.io/revel/manual/index.html">bunch of other shenanigans</a>. Bascially all the stuff you don&rsquo;t want to write on your own every time.</p>

<p>Websockets are a way of bi-directional communication between client and server and are supported by all newer browsers. You can read the spec <a href="http://tools.ietf.org/html/rfc6455">here</a>.</p>

<p>Backbone is a micro MV* javascript framework that is very un-opinionated about how you structure your code. The source is concise and well documented. Check it out <a href="http://backbonejs.org">here</a>.</p>

<h3>Getting Started</h3>

<p>First things first. We are running Go 1.1.1, the revel framework is installed to our $GOPATH and we are able to call the revel command line tool from our shell. If that sounds like crazy talk to you, read up about installing Go, the $GOPATH/BIN environment variables and installing revel, here:</p>

<ul>
<li><a href="http://golang.org/doc/install">Getting started with Go</a></li>
<li><a href="http://robfig.github.io/revel/index.html#quickstart">Revel Quickstart</a></li>
</ul>


<p>We start off by creating a new revel project. The first command will install a skeletton app into our $GOPATH/src. After that we may run the application. Revel will put a harness around our app that will rebuild and reload the app every time it detects a code change. This allows us to see changes immediately, which is super neat. It listens on :9000 per default, upon navigating to localhost:9000 we are greeted with a friendly &ldquo;It works!&rdquo;. So far so good.
<code>
$ revel new feed
$ revel run feed
</code></p>

<p>After that we fire up our favorite editor and get to work. As we are building a single page application, our backbone router will do most of the routing. By adding a new &ldquo;catch-all&rdquo; route to our conf/routes file we ensure that every request that is not beeing catched by previous routes, gets handed off to our Index route. we are also adding a route that accepts a Websocket connection at /feed/connect which will be handled by the Feed controller (later).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Adding a wildcard to our routes (routes)</span> <a href='/downloads/code/feed/conf/routes'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="c"># Routes</span>
</span><span class='line'><span class="c"># This file defines all application routes (Higher priority routes first)</span>
</span><span class='line'><span class="c"># ~~~~</span>
</span><span class='line'>
</span><span class='line'><span class="n">module</span><span class="p">:</span><span class="n">testrunner</span>
</span><span class='line'>
</span><span class='line'><span class="n">GET</span>     <span class="o">/</span>                                       <span class="n">App</span><span class="p">.</span><span class="n">Index</span>
</span><span class='line'><span class="n">WS</span>      <span class="o">/</span><span class="n">feed</span><span class="o">/</span><span class="n">connect</span>                           <span class="n">Feed</span><span class="p">.</span><span class="n">Connect</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Ignore favicon requests</span>
</span><span class='line'><span class="n">GET</span>     <span class="o">/</span><span class="n">favicon</span><span class="p">.</span><span class="n">ico</span>                            404
</span><span class='line'>
</span><span class='line'><span class="c"># Map static resources from the /app/public folder to the /public path</span>
</span><span class='line'><span class="n">GET</span>     <span class="o">/</span><span class="n">public</span><span class="o">/*</span><span class="n">filepath</span>                       <span class="n">Static</span><span class="p">.</span><span class="n">Serve</span><span class="p">(</span><span class="s">&quot;public&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># We&#39;re doing all remaining routing on the client</span>
</span><span class='line'><span class="n">GET</span>     <span class="o">/*</span>                                      <span class="n">App</span><span class="p">.</span><span class="n">Index</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Revel has a built in static file server that will serve from /public. We add a vendor folder to public, download our frontend dependencies and include them in our footer template. We are also going to add a template that holds our underscore templates.</p>

<ul>
<li><a href="http://jquery.com">jQuery</a></li>
<li><a href="http://underscorejs.org">Underscore</a></li>
<li><a href="http://backbonejs.org">Backbone</a></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Including frontend dependencies (footer.html)</span> <a href='/downloads/code/feed/app/views/footer.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  {{template &quot;underscore-templates.html&quot; .}}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/public/vendor/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/public/vendor/underscore.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/public/vendor/backbone.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/public/js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Wiring up the frontend</h3>

<p>We continue in app.js. with some boilerplate code. We are good citizen and namespace our app under the FEED object, so we don&rsquo;t pollute the global namespace. We add a start method that we use to bootstrap our router and views and wrap it inside jQuery&rsquo;s document ready function. We have also added a global event bus <i>vent</i>, that we can later publish events to.</p>

<p>``` javascript Bootstraping our frontend</p>

<p>window.Feed = {</p>

<pre><code>start: function() {
    this.vent = _.clone(Backbone.Events)
    this.router = new this.Router
    Backbone.history.start({pushState: true})
}
</code></pre>

<p>}</p>

<p>Feed.Router = Backbone.Router.extend({</p>

<pre><code>routes: {
    ''      :    'index'
},
index: function() {
    alert('hooray!')
}
</code></pre>

<p>})</p>

<p>$(function() {</p>

<pre><code>Feed.start()
</code></pre>

<p>})</p>

<p>```</p>

<h3>Wrapping it up</h3>

<p>So far we have laid out the foundation with some boilerplate code, added a &ldquo;catch-all&rdquo; route that proxies most requests to our backbone router and added some frontend libraries. Pretty basic stuff, really.
In the next post we are going to open a web socket connection and wire it all up with a brand new Feed controller. Thanks for reading, stay tuned.</p>
]]></content>
  </entry>
  
</feed>
