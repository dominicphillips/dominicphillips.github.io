<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HTML5 | Adventures in code land]]></title>
  <link href="http://dominicphillips.de/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://dominicphillips.de/"/>
  <updated>2014-05-19T12:23:00+02:00</updated>
  <id>http://dominicphillips.de/</id>
  <author>
    <name><![CDATA[Dominic Phillips]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rsponsive HTML5 Video Background]]></title>
    <link href="http://dominicphillips.de/blog/2014/02/25/responsive-html5-video-background/"/>
    <updated>2014-02-25T13:25:00+01:00</updated>
    <id>http://dominicphillips.de/blog/2014/02/25/responsive-html5-video-background</id>
    <content type="html"><![CDATA[<p>Check out the demo / result <a href="/here">here</a></p>

<p>This is a quick tutorial on how to use HTML5 video as a fancy background like facebook does it <a href="https://www.facebook.com/paper">on their Paper teaser site</a>, including some javascript controls.
First of all we obviously need a video. Depending on the browsers you want to support, we need different formats. For sake of simplicity I&rsquo;m just going to use mp4. I grabbed a videos from youtube starring <a href="http://www.macmillerofficial.com/">Mac Miller</a> because I enjoy his music, go buy it on itunes.</p>

<p>We&rsquo;re starting off with a fresh html page and add the first video tag to it.</p>

<p>``` html</p>

<p>  &lt;!DOCTYPE html>
  <html>
  <head></p>

<pre><code>&lt;title&gt;HTML5 Video Background Demo&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div class="video-background"&gt;
  &lt;video class="video" src="http://dominicphillips.de/video/hoodie.mp4"&gt;&lt;/video&gt;
&lt;/div&gt;
</code></pre>

<p>  </body>
  </html>
```
&hellip; some css &hellip;</p>

<p><code>css
.video {
  width: 100% !important;
  height: auto !important;
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -moz-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
}
</code>
The video now takes up 100% of the width of the screen, while automatically scaling the height to keep the aspect ratio. In order for these to switch we add an css media query to our css.
We&rsquo;re also going to use a new css3 property called object-fit: and set it to contain, this ensures&hellip;</p>

<p>``` css
@media (max-aspect-ratio: 16/9) {
  .video {</p>

<pre><code>width: auto !important;
height: 100% !important;
</code></pre>

<p>  }
}</p>

<p>video {
  object-fit: contain;
}
```</p>
]]></content>
  </entry>
  
</feed>
